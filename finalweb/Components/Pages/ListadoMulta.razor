@page "/agente/listado-multas"
@using Microsoft.EntityFrameworkCore
@inject MultasDbContext DbContext
@layout AgenteLayout
@rendermode InteractiveServer

<div class="multas-container">
    <div class="header">
        <h1 class="page-title">Registro de Multas</h1>
        <div class="header-stats">
            <div class="stat-card total-multas">
                <i class="fas fa-scroll"></i>
                <div class="stat-info">
                    <span class="stat-number">@(multas?.Count ?? 0)</span>
                    <span class="stat-label">Multas Totales</span>
                </div>
            </div>
        </div>
    </div>

    @if (multas == null)
    {
        <div class="loading-spinner">
            <div class="spinner"></div>
            <p>Cargando multas...</p>
        </div>
    }
    else if (!multas.Any())
    {
        <div class="no-data">
            <i class="fas fa-folder-open"></i>
            <p>No hay multas registradas en este momento.</p>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Ciudadano</th>
                        <th>Concepto</th>
                        <th>Fecha</th>
                        <th>Estado</th>
                        <th>Agente</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var multa in multas)
                    {
                        <tr>
                            <td>@multa.Id</td>
                            <td>
                                <div class="user-info">
                                    <span class="user-name">@multa.NombreCiudadano</span>
                                    <small class="user-cedula">@multa.CedulaCiudadano</small>
                                </div>
                            </td>
                            <td>
                                <span class="badge bg-info">@multa.Concepto?.Nombre</span>
                            </td>
                            <td>@multa.FechaRegistro.ToString("dd/MM/yyyy")</td>
                            <td>
                                <span class="badge @GetEstadoClass(multa.Estado)">@multa.Estado</span>
                            </td>
                            <td>@multa.AgenteId</td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-warning" @onclick="() => EditarMulta(multa.Id)">
                                        <i class="fas fa-edit"></i> Editar
                                    </button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => EliminarMulta(multa.Id)">
                                        <i class="fas fa-trash-alt"></i> Eliminar
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Modal de edición -->
@if (multaAEditar != null)
{
    <div class="modal" tabindex="-1" style="display:block" id="editarModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editar Multa</h5>
                    <button type="button" class="close" @onclick="CerrarModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="estado">Estado</label>
                        <select class="form-control" id="estado" @bind="multaAEditar.Estado">
                            <option value="Activa">Activa</option>
                            <option value="Pagada">Pagada</option>
                            <option value="Perdonada">Perdonada</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="descripcion">Descripción</label>
                        <textarea class="form-control" id="descripcion" @bind="multaAEditar.Descripcion"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cerrar</button>
                    <button type="button" class="btn btn-primary" @onclick="GuardarEdicion">Guardar cambios</button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    /* Estilos para el modal */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: none;
    }
    .modal-dialog {
        margin-top: 10%;
    }
</style>

@code {
    private List<Multa> multas;
    private Multa multaAEditar;

    private string GetEstadoClass(string estado)
    {
        return estado switch
        {
            "Activa" => "bg-danger",
            "Pagada" => "bg-success",
            "Perdonada" => "bg-warning",
            _ => "bg-secondary"
        };
    }

    protected override async Task OnInitializedAsync()
    {
        multas = await DbContext.Multas
            .Include(m => m.Concepto)
            .ToListAsync();
    }

    private async Task EliminarMulta(int id)
    {
        var multa = await DbContext.Multas.FindAsync(id);
        if (multa != null)
        {
            DbContext.Multas.Remove(multa);
            await DbContext.SaveChangesAsync();
            multas = await DbContext.Multas.Include(m => m.Concepto).ToListAsync();
        }
    }

    private void EditarMulta(int id)
    {
        multaAEditar = multas.FirstOrDefault(m => m.Id == id);
    }

    private async Task GuardarEdicion()
    {
        DbContext.Multas.Update(multaAEditar);
        await DbContext.SaveChangesAsync();
        multas = await DbContext.Multas.Include(m => m.Concepto).ToListAsync();
        CerrarModal();
    }

    private void CerrarModal()
    {
        multaAEditar = null;
    }
}
